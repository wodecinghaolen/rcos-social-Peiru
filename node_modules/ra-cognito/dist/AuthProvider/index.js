"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.currentSession = exports.changePassword = exports.logout = exports.login = exports.signIn = exports.completeNewPassword = exports.getError = exports.applyBinaryFn = void 0;

var R = _interopRequireWildcard(require("ramda"));

var _awsAmplify = require("aws-amplify");

var _reactAdmin = require("react-admin");

var _amazonCognitoIdentityJs = require("amazon-cognito-identity-js");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/* eslint-disable prefer-promise-reject-errors */
// applyBinaryFn = (* -> a) -> [*] -> a
var applyBinaryFn = function applyBinaryFn(f) {
  return R.apply(R.binary(f));
}; // getError :: Object -> a


exports.applyBinaryFn = applyBinaryFn;
var getError = R.prop('error'); // completeNewPassword :: String -> String -> Object

exports.getError = getError;
var completeNewPassword = applyBinaryFn(_awsAmplify.Auth.completeNewPassword.bind(_awsAmplify.Auth)); // signIn :: String -> String -> Object

exports.completeNewPassword = completeNewPassword;
var signIn = applyBinaryFn(_awsAmplify.Auth.signIn.bind(_awsAmplify.Auth)); // login :: Object -> Object

exports.signIn = signIn;

var login = function login(params) {
  if (params instanceof _amazonCognitoIdentityJs.CognitoUser) {
    return params;
  }

  var error = getError(params);

  if (error) {
    return Promise.reject(error);
  }

  return R.compose(signIn, R.props(['username', 'password']))(params);
};

exports.login = login;

var logout = function logout() {
  return _awsAmplify.Auth.signOut({
    global: true
  });
}; // changePassword :: Object -> Object


exports.logout = logout;

var changePassword = function changePassword(params) {
  return R.compose(completeNewPassword, R.props(['cognitoUser', 'password']))(params);
};

exports.changePassword = changePassword;

var currentSession = function currentSession() {
  return _awsAmplify.Auth.currentSession().then(function (session) {
    if (!session) {
      return Promise.reject('You need to sign in to access that page.');
    }

    return session;
  });
};

exports.currentSession = currentSession;

var AuthProvider = function AuthProvider(type, params) {
  if (type === _reactAdmin.AUTH_LOGIN) {
    return login(params);
  }

  if (type === _reactAdmin.AUTH_LOGOUT) {
    return logout(params);
  }

  if (type === _reactAdmin.AUTH_CHECK) {
    return currentSession();
  }

  if (type === _reactAdmin.AUTH_ERROR) {
    return Promise.resolve(); // 4xx errors should not log the user out.
  }

  if (type === _reactAdmin.AUTH_GET_PERMISSIONS) {
    return Promise.resolve({}); // Unimplemented (global permissions)
  }

  return Promise.reject("Unsupported authentication method ".concat(type, "."));
};

var _default = AuthProvider;
exports.default = _default;