"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var R = _interopRequireWildcard(require("ramda"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

// passwordSatisfies :: (a -> Boolean) -> Object -> Boolean
var passwordSatisfies = R.flip(R.propSatisfies)('password'); // passwordDoesNotMatch :: RegExp -> Object -> Boolean

var passwordDoesNotMatch = R.compose(passwordSatisfies, R.complement(R.test)); // lengthLessThan :: Number -> String -> Boolean

var lengthLessThan = function lengthLessThan(num) {
  return R.compose(R.flip(R.lt)(num), R.length);
}; // passwordSingleton :: a -> Object


var passwordSingleton = R.objOf('password'); // validate :: ((a -> Boolean), String) -> [(a -> Boolean), (a -> Object)]

var validate = function validate(fn, message) {
  return [fn, function () {
    return passwordSingleton(message);
  }];
}; // validateRegex :: (RegExp, String) -> [(a -> Boolean), (a -> Object)]


var validateRegex = function validateRegex(regex, message) {
  return validate(passwordDoesNotMatch(regex), message);
}; // validatePassword :: Object -> Object


var validatePassword = R.cond([validate(passwordSatisfies(lengthLessThan(8)), 'Password must be at least 8 characters.'), validateRegex(/[A-Z]/, 'Password must contain an uppercase character.'), validateRegex(/[a-z]/, 'Password must contain an lowercase character.'), validateRegex(/\d/, 'Password must contain a number.'), validateRegex(/[^\dA-Z]/i, 'Password must contain a special character.'), [R.T, R.always({})]]); // validateChangePassword :: (Object, Object) -> Object

var validateChangePassword = function validateChangePassword(values, props) {
  return R.ifElse(R.prop('password'), validatePassword, function () {
    return passwordSingleton(props.translate('ra.validation.required'));
  })(values);
};

var _default = validateChangePassword;
exports.default = _default;